"""
1.pygame编写游戏的基本结构

    主文件：alien_invasion
        模块内包含了 pygame_init_初始化、屏幕左上角标题文字、子弹和外星人编组、设置实例化对象、飞船的实例化对象、游戏运行的while循环、游戏运行方法run()
        输入事件检测以及游戏继续还是停止的活动标志
            while循环：子弹、外星人信息的update方法、屏幕绘制以及最近绘制可见方法

        问题：
        如果实例化对象需要上面实例化的对象当作参数传入，那必须在那个对象实例化之后实例化，代码执行顺序决定。
        子弹编组和外星人编组这块不懂，为什么不用创建子弹和外星人的实例化对象？创建了编组就等同于创建了一个实例化对象？？
        遇到bug，还是没有解决思路，总是靠猜测，因为不懂函数调用和参数传递的整个过程吗？
        不会debug调试


        将背景颜色替换成图标
        pycharm 在debug过程中代码没有显示具体输入输出值
        fill() 、 flip()方法、set_mode()、displayed()

    功能模块：game_function
        模块包含 关闭响应事件的检查方法、摁下响应检查方法、抬起响应检查方法、外星人群的创建(为什么不在外星人模块)、屏幕信息更新方法
        子弹更新方法、外星人和子弹碰撞检查方法、子弹集检查方法、外星人创建方法(为什么要放在这)、计算一行多少个外星人方法、计算能放多少行外星人方法
        外星人更新方法、ship_hit没懂这个方法、检查外星人达到边缘时的方法、检查向下移动的方法、检查外星人到达底部的方法
        关闭响应事件的检查方法：
        摁下响应检查方法
        抬起响应检查方法
        外星人群的创建(为什么不在外星人模块)
        屏幕信息更新方法
        子弹更新方法
        外星人和子弹碰撞检查方法
        子弹集检查方法
        外星人创建方法(为什么要放在这)
        计算一行多少个外星人方法
        计算能放多少行外星人方法
        外星人更新方法
        ship_hit没懂这个方法
        检查外星人达到边缘时的方法
        检查向下移动的方法
        检查外星人到达底部的方法


    设置模块：settings
        模块内包含了 屏幕的相关设置、子弹的相关设置、外星人的相关设置、飞船的相关设置。
        屏幕：屏幕长宽、背景颜色
        子弹：子弹速度、子弹长款、子弹颜色、屏幕中存在子弹最大数量
        外星人：移动速度、下降速度、左右移动标志
        飞船：可使用的飞船数量

    外星人模块：alien
        模块内包含了 屏幕初始化、外星人绘制方法、外星人更新方法
            初始化：屏幕初始化、设置初始化、加载外星人图片、获取外星人的外接矩形、将外星人设置在指定位置(屏幕的左上角)、小数处理
            外星人绘制方法：blit()方法
            外星人更新方法：更新外星人左右移动方向和移动速度导致的坐标变化 x坐标
            检查外星人碰撞方法：

    问题
        获取外接矩形时使用的是alien_rect,创建alien=Group编组后会报错，改成rect后就正常运行。
        这是为什么呢？？会不会参数传递过程中应该传递alien_rect 而传递成了 rect？？？
            Ship/aline/bullet' object has no attribute 'rect'/image
        外星人x坐标更新方法不熟，不明白怎么导致的左右移动，八成是当时没有想就直接开抄导致的。
        初始化的内容应该都包含哪些？为什么会是screen和setting
        blit()方法

    飞船模块：ship
        模块包含了 屏幕初始化、飞船的绘制方法 、飞船的更新方法、飞船重置在屏幕中间的方法
        初始化：屏幕初始化、设置初始化、加载飞船图片、获取飞船外接矩形、将飞船设置在指定位置、移动标志(false)
        飞船绘制方法：blit()方法
        飞船移动更新方法：左右移动标志
        飞船重置方法：

    问题
        centerx 与 center的区别;ship_rect.center 与 ship_rect.centerx 的区别是啥
        除了使用的x，y还有其他方向吗
        为什么这个模块中包含这些内容，与game_function中的区别是啥


    子弹模块：bullet
    模块包含 屏幕初始化、获取子弹的形状、子弹初始位置、子弹位置更新方法、子弹绘制方法
    初始化：屏幕初始化、获取子弹形状、子弹初始位置
    子弹更新方法：更新y坐标
    子弹绘制方法：pygame.draw.rect(self.screen, self.color, self.rect)

    问题：
        为什么这里用pygame.draw.rect()方法而不是blit()方法
        子弹小数处理和飞船、外星人等的小数处理，没看懂，
        如果不处理小数其实也没啥问题，运行也不会有报错


    游戏状态模块：game_stats
    模块包含 屏幕初始化、游戏开始的标志、游戏重新开始的方法
    初始化：屏幕初始化、游戏开始的标志、通过方法调用重置飞船数量
    游戏重新开始的方法：重置飞船的数量


2.如何设置背景色
    在setting模块中设置背景颜色 self.bg_color = 230,230,230
    在alien_invasion中实例化setting
    在gf模块的屏幕更新方法中，对fill方法传入实例化对象,screen.fill(instance_setting.bg_color)
    在主文件alien_invasion 循环体中调用screen_update()

3.如何将设置存储在可供游戏的各个部分访问的独立类中



4.如何在屏幕上绘制图像，以及如何让玩家控制游戏元素的移动
    绘制图像分两种 1种是图片，1种是像素
    飞船绘制：通过pygame.image.load()加载图标,赋给一个surface对象。对象.rect.get()方法获得外接矩形并设置对象的xy坐标，使用blit()方法绘制出来
            传递参数是 对象和
    子弹绘制：通过pygame.Rect()方法获取子弹的外接矩形，设置子弹的xy坐标，通过pygame.draw.rect()方法绘制出来

    飞船移动：在ship文件中设置飞船的移动速度，设置左右连续移动标志，在gf事件检测中，如果摁下连续移动标志True，则连续向右/向左移动，如果抬起，则连续移动标志变为false
            移动速度在ship中的update方法控制，该方法也判断了达到了屏蔽左右边缘后的处理，防止飞船不在屏幕内。


5.如何创建自动移动的元素，如在屏幕中向上飞驰的子弹，以及如何删除不在需要的对象

6.如何定期重构项目的代码，为后续开发提供便利。
7.如何在游戏中添加大量相同元素，如创建一群外星人
8.如何使用嵌套循环来创建元素网格
9.如何通过调用每个元素的方法update()移动了大量的元素
10.如何控制对象在屏幕上移动的方向，以及响应事件，如有外星人到达边缘
11。如何检测和响应子弹和外星人碰撞以及外星人和飞船碰撞
12.如何在游戏中跟踪统计信息
13.如何使用标志game_active来判断游戏是否结束了。





-----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
如何使用pygame中的Sprite类，如何继承。

class Aliens(Sprite):
    # 继承并初始化精灵类必要属性
    def __init__:
        super().__init__(screen)
        self.screen = screen
        # 初始化精灵图像
        self.image = pygame.image.load("文件位置")
        # 初始化精灵图像位置
        self.rect = self.image.get_rect()
        # 指定精灵图像位置
        self.rect.x = self.screen.centerx
        self.rect.y = self.screen.centery

    update(self):
        这里是精灵对象的更新方法

    draw(self):
        这里是精灵对象的绘制方法
        self.screen.blit(self.image,self.rect)





























"""